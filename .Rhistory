mypoints<-plot.lsm(model = solu, a = a, z = cbind(y,y2), d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, z = cbind(y,y2), d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, z = cbind(y,y2), d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
mypoints
# Build the empiric variogram
vario <- variogram.lsm(cbind(y,y2),d,a$anchorpoints,570,4,15,dim = 1,kernel_id = "gaussian")
mypoints<-plot.lsm(model = solu, a = a, z = cbind(y,y2), d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
# Find the solutions
solu <- findsolutions.lsm(vario, c("exp"), c(570/2,571/2,0.1,100,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,1e-8,-Inf,1e-8,-Inf,-Inf,-Inf))
mypoints<-plot.lsm(model = solu, a = a, z = cbind(y,y2), d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, z = cbind(y,y2), d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
mypoints<-plot.lsm(model = solu, a = a, z = cbind(y,y2), d = d, n_points = 5, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
previsions <- predict.lsm(solu, d, plot_output = T)
max(previsions$zpredicted - y)
mypoints<-plot.lsm(model = solu, a = a, z = cbind(y,y2), d = d, n_points = 5, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, z = cbind(y,y2), d = d, n_points = 15, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
# Load the libraries
library(LocallyStationaryModels)
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- 5*meuse$elev*meuse$x/max(meuse$x)
y2 <- meuse$cadmium*meuse$y/meuse$x
y3 <- meuse$lead/30
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(cbind(y,y2),d,a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential","exponential"), c(570/2,571/2,0.1,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
# Plot of the solutions
# Plot of the solutions
solu$solutions
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential","exponential"), c(570/2,571/2,0.1,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential","nugget"), c(570/2,571/2,0.1,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
library(LocallyStationaryModels)
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential","nugget"), c(570/2,571/2,0.1,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
library(LocallyStationaryModels)
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential","nugget"), c(570/2,571/2,0.1,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
library(LocallyStationaryModels)
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential","nugget"), c(570/2,571/2,0.1,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
library(LocallyStationaryModels)
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential","nugget"), c(570/2,571/2,0.1,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential","nugget"), c(570/2,571/2,0.1,1000,1000,1000,100,1000,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential","nugget"), c(570/2,571/2,0.1,1000,1000,1000,100,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential","nugget"), c(570/2,571/2,0.1,1000,1000,1000,100,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
library(LocallyStationaryModels)
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential","nugget"), c(570/2,571/2,0.1,1000,1000,1000,100,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
library(LocallyStationaryModels)
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential","nugget"), c(570/2,571/2,0.1,1000,1000,1000,100,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
# Find the solutions
solu <- findsolutions.lsm(vario , c("nugget","exponential"), c(570/2,571/2,0.1,1000,1000,1000,100,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
library(LocallyStationaryModels)
# Find the solutions
solu <- findsolutions.lsm(vario , c("nugget","exponential"), c(570/2,571/2,0.1,1000,1000,1000,100,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
# Load the libraries
library(LocallyStationaryModels)
# Load the data
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- 5*meuse$elev*meuse$x/max(meuse$x)
y2 <- meuse$cadmium*meuse$y/meuse$x
y3 <- meuse$lead/30
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(cbind(y,y2),d,a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential","nugget"), c(570/2,571/2,0.1,1000,1000,1000,100,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential"), c(570/2,571/2,0.1,1000,1000,1000,100,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
mypoints<-plot.lsm(model = solu, a = a, z = cbind(y,y2), d = d, n_points = 15, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
# Build the empiric variogram
vario <- variogram.lsm(cbind(y,y2),d,a$anchorpoints,570,4,15,dim = 1,kernel_id = "gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential"), c(570/2,571/2,0.1,1000,1000,1000,100,1000,1000,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf,-Inf))
mypoints<-plot.lsm(model = solu, a = a, z = cbind(y,y2), d = d, n_points = 15, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
# Build the empiric variogram
vario <- variogram.lsm(cbind(y,y2),d,a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
mypoints<-plot.lsm(model = solu, a = a, z = cbind(y,y2), d = d, n_points = 15, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
previsions <- predict.lsm(solu, d, plot_output = T)
max(previsions$zpredicted - y)
previsions$zpredicted - y
solu$solutions
solu <- findsolutions.lsm(vario1, "maternNuNugget_1", c(200,200,0.01,100,0.1))
previsions <- predict.lsm(solu, d, plot_output = T)
max(previsions$zpredicted - y)
previsions$zpredicted
vario1 <- variogram.lsm(cbind(y,y2),d,a$anchorpoints,570,4,15,dim = 1,kernel_id = "gaussian")
solu <- findsolutions.lsm(vario1, "maternNuNugget_1", c(200,200,0.01,100,0.1))
previsions <- predict.lsm(solu, d, plot_output = T)
library(LocallyStationaryModels)
previsions <- predict.lsm(solu, d, plot_output = T)
max(previsions$zpredicted - y)
previsions <- predict.lsm(solu, d, plot_output = T)
library(LocallyStationaryModels)
previsions <- predict.lsm(solu, d, plot_output = T)
solu <- findsolutions.lsm(vario1, "exponential", c(200,200,0.01,100,0.1))
previsions <- predict.lsm(solu, d, plot_output = T)
max(previsions$zpredicted - y)
min(previsions$zpredicted - y)
max(abs(previsions$zpredicted - y))
previsions$zpredicted
y
max(abs(previsions$zpredicted - cbind(y,y2)))
cbind(y,y2)
mypoints<-plot.lsm(model = solu, a = a, z = cbind(y,y2), d = d, n_points = 15, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Build the empiric variogram
vario <- variogram.lsm(cbind(y,y2),d,a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
library(LocallyStationaryModels)
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 15, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
previsions <- predict.lsm(solu, d, plot_output = T)
library(LocallyStationaryModels)
previsions <- predict.lsm(solu, d, plot_output = T)
library(LocallyStationaryModels)
# Build the empiric variogram
vario <- variogram.lsm(cbind(y,y2),d,a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
solu <- findsolutions.lsm(vario1, "exponential", c(200,200,0.01,100,0.1))
# Build the empiric variogram
vario <- variogram.lsm(cbind(y,y2),d,a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
solu$initial_z
library(LocallyStationaryModels)
solu$initial_z
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
solu$initial_z
vario1 <- variogram.lsm(cbind(y,y2),d,a$anchorpoints,570,4,15,dim = 1,kernel_id = "gaussian")
solu <- findsolutions.lsm(vario1, "exponential", c(200,200,0.01,100,0.1))
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 10, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
# Build the empiric variogram
vario <- variogram.lsm(cbind(y,y2),d,a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 10, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 10, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 10, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
vario1 <- variogram.lsm(cbind(y,y2),d,a$anchorpoints,570,4,15,dim = 1,kernel_id = "gaussian")
solu <- findsolutions.lsm(vario1, "exponential", c(200,200,0.01,100,0.1))
##
x11()
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
# Build the empiric variogram
vario <- variogram.lsm(cbind(y,y2),d,a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
previsions <- predict.lsm(solu, d, plot_output = T)
library(LocallyStationaryModels)
previsions <- predict.lsm(solu, d, plot_output = T)
library(LocallyStationaryModels)
previsions <- predict.lsm(solu, d, plot_output = T)
previsions <- predict.lsm(solu, d, plot_output = T)
previsions <- predict.lsm(solu, d, plot_output = T)
library(LocallyStationaryModels)
previsions <- predict.lsm(solu, d, plot_output = T)
# Find the solutions
solu <- findsolutions.lsm(vario , c("gaussian"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
previsions <- predict.lsm(solu, d, plot_output = T)
# Find the solutions
solu <- findsolutions.lsm(vario , c("maternNuFixed_1"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
# Find the solutions
solu <- findsolutions.lsm(vario , c("maternNuFixed_2"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Find the solutions
solu <- findsolutions.lsm(vario , c("maternNuFixed_0.5"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
# Find the solutions
solu <- findsolutions.lsm(vario , c("gaussian"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
# Find the solutions
solu <- findsolutions.lsm(vario , c("exponential"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
# Find the solutions
solu <- findsolutions.lsm(vario , c("gaussian"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
solu <- findsolutions.lsm(vario , c("exp"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
# Find the solutions
solu <- findsolutions.lsm(vario , c("exp"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
previsions <- predict.lsm(solu, d, plot_output = T)
library(LocallyStationaryModels)
previsions <- predict.lsm(solu, d, plot_output = T)
vario1 <- variogram.lsm(cbind(y,y2)[1:10,:],d,a$anchorpoints,570,4,15,dim = 1,kernel_id = "gaussian")
# Build the empiric variogram
vario <- variogram.lsm(cbind(y[1:10,:],y2[1:10,:]),d,a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
# Build the empiric variogram
vario <- variogram.lsm(cbind(y[1:10,],y2[1:10,]),d,a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
y
# Build the empiric variogram
vario <- variogram.lsm(cbind(y[1:10],y2[1:10]),d,a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
# Find anchorpoints
a <- find_anchorpoints.lsm(d[1:10],12)
# Build the empiric variogram
vario <- variogram.lsm(cbind(y[1:10],y2[1:10]),d[1:10],a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
# Find anchorpoints
a <- find_anchorpoints.lsm(d[1:10,],12)
# Build the empiric variogram
vario <- variogram.lsm(cbind(y[1:10],y2[1:10]),d[1:10,],a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario , c("exp"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
vario1 <- variogram.lsm(cbind(y,y2),d,a$anchorpoints,570,4,15,dim = 1,kernel_id = "gaussian")
# Plot of the solutions
solu$solutions
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
library(LocallyStationaryModels)
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
# Find anchorpoints
a <- find_anchorpoints.lsm(d[1:5,],12)
# Build the empiric variogram
vario <- variogram.lsm(cbind(y[1:5],y2[1:5]),d[1:5,],a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario , c("exp"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
# Plot of the solutions
solu$solutions
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
previsions <- predict.lsm(solu, d, plot_output = T)
previsions <- predict.lsm(solu, d, plot_output = T)
max(abs(previsions$zpredicted - cbind(y[1:5],y2[1:5])))
previsions <- predict.lsm(solu, d[1:5,], plot_output = T)
cv.lsm(y,d,a$anchorpoints,350,8,8,"gaussian","exponential", c(200,200,0.01,100))
max(abs(previsions$zpredicted - cbind(y[1:5],y2[1:5])))
cbind(y[1:5],y2[1:5]
)
previsions$zpredicted
# Find anchorpoints
a <- find_anchorpoints.lsm(d[1:7,],12)
# Build the empiric variogram
vario <- variogram.lsm(cbind(y[1:7],y2[1:7]),d[1:7,],a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario , c("exp"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
mypoints<-plot.lsm(model = solu, a = a, d = d, n_points = 1, points_arrangement = "straight", kriging = TRUE,
ellipse_scale = 2.5, arrow_scale = 1.5)
previsions <- predict.lsm(solu, d[1:7,], plot_output = T)
max(abs(previsions$zpredicted - cbind(y[1:7],y2[1:7])))
# Find anchorpoints
a <- find_anchorpoints.lsm(d,12)
# Build the empiric variogram
vario <- variogram.lsm(cbind(y,y2),d,a$anchorpoints,570,4,15,dim = 2,kernel_id = "gaussian")
# Find the solutions
solu <- findsolutions.lsm(vario , c("exp"), c(570/2,571/2,0.1,1000,1000,1000),lower.bound = c(1e-8,1e-8,1e-8,-Inf,-Inf,-Inf))
1:7,]
previsions <- predict.lsm(solu, d[1:7,], plot_output = T)
max(abs(previsions$zpredicted - cbind(y[1:7],y2[1:7])))
# Plot of the solutions
solu$solutions
previsions <- predict.lsm(solu, d[1:21,], plot_output = T)
previsions <- predict.lsm(solu, d[1:21,], plot_output = T)
previsions <- predict.lsm(solu, d[15:21,], plot_output = T)
previsions <- predict.lsm(solu, d[1:5,], plot_output = T)
max(abs(previsions$zpredicted - cbind(y[1:5,],y2[1:5,])))
max(abs(previsions$zpredicted - cbind(y[1:5,],y2[1:5,])))
max(abs(previsions$zpredicted - cbind(y[1:5],y2[1:5])))
library(LocallyStationaryModels)
previsions <- predict.lsm(solu, d[1:5,], plot_output = T)
previsions <- predict.lsm(solu, d[1:6,], plot_output = T)
d <- cbind(simulated_process[,1],simulated_process[,2])
load("C:/Users/Giacomo/Downloads/simulated_process.Rdata")
d <- cbind(simulated_process[,1],simulated_process[,2])
a <- find_anchorpoints.lsm(d,n = 4)
library(LocallyStationaryModels)
d <- cbind(simulated_process[,1],simulated_process[,2])
a <- find_anchorpoints.lsm(d,n = 4)
z <- as.matrix(simulated_process[,3])
vario <- variogram.lsm(z = z,d = d,a = a$anchorpoints,epsilon=0.1,n_angles=6,n_intervals=12,dim=1,kernel_id="gaussian")
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.01,0.01,0.1,0.01))
mypoints<-plot.lsm(model = solu, a=a, n_points = 10, points_arrangement = "straight", kriging = FALSE,
ellipse_scale = 2.5 , arrow_scale = 1.5)
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.01,0.1,0.1,0.01))
solu$solutions
mypoints<-plot.lsm(model = solu, a=a, n_points = 10, points_arrangement = "straight", kriging = FALSE,
ellipse_scale = 2.5 , arrow_scale = 1.5)
vario <- variogram.lsm(z = z,d = d,a = a$anchorpoints,epsilon=0.01,n_angles=6,n_intervals=12,dim=1,kernel_id="gaussian")
plotvario(vario,6)
vario <- variogram.lsm(z = z,d = d,a = a$anchorpoints,epsilon=0.01,n_angles=6,n_intervals=12,dim=1,kernel_id="gaussian")
plotvario(vario,6)
library(LocallyStationaryModels)
d <- cbind(simulated_process[,1],simulated_process[,2])
a <- find_anchorpoints.lsm(d,n = 4)
vario <- variogram.lsm(z = z,d = d,a = a$anchorpoints,epsilon=0.01,n_angles=6,n_intervals=12,dim=1,kernel_id="gaussian")
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.01,0.1,0.1,0.01))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.001,0.001,0.1,0.01))
solu$solutions
vario <- variogram.lsm(z = z,d = d,a = a$anchorpoints,epsilon=0.1,n_angles=6,n_intervals=12,dim=1,kernel_id="gaussian")
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.001,0.001,0.1,0.01))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.001,0.001,0.1,0.1))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.01,0.01,0.1,0.1))
solu$solutions
std(z)
var(z)
sqrt(var(z))
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.01,0.01,0.1,0.5))
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.01,0.01,0.1,1))
solu$solutions
exp(-8)
sqrt(exp(-8))
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.02,0.06,0.1,1))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.2,0.06,0.1,1))
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.2,0.6,0.1,1))
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.05,0.05,0.1,1))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.05,0.05,0.1,0.5))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.05,0.05,0.1,0.5), upper.bound = c(0.2,0.2,pi/2,1))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.05,0.05,0.1,0.5), upper.bound = c(0.2,0.2,pi/2,10))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.5,0.5,0.1,0.5), upper.bound = c(0.2,0.2,pi/2,10))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.5,0.5,0.3,0.5), upper.bound = c(0.2,0.2,pi/2,10))
solu$solutions
sqrt(0.2)
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.5,0.5,0.3,0.5), upper.bound = c(0.5,0.5,pi/2,10))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.5,0.5,0.3,1), upper.bound = c(0.5,0.5,pi/2,10))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.5,0.5,0.3,0.3), upper.bound = c(0.5,0.5,pi/2,10))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 1, "exp", c(0.2,0.2,0.3,0.3), upper.bound = c(0.5,0.5,pi/2,10))
solu$solutions
mypoints<-plot.lsm(model = solu, a=a, n_points = 10, points_arrangement = "straight", kriging = FALSE,
ellipse_scale = 2.5 , arrow_scale = 1.5)
solu <- findsolutions.lsm(vario ,lower.delta = 2, "exp", c(0.2,0.2,0.3,0.3), upper.bound = c(0.5,0.5,pi/2,10))
solu$solutions
mypoints<-plot.lsm(model = solu, a=a, n_points = 10, points_arrangement = "straight", kriging = FALSE,
ellipse_scale = 2.5 , arrow_scale = 1.5)
mypoints<-plot.lsm(model = solu, a=a, n_points = 10, points_arrangement = "straight", kriging = FALSE,
ellipse_scale = 2.5 , arrow_scale = 1.5)
a <- find_anchorpoints.lsm(d,n = 1)
z <- as.matrix(simulated_process[,3])
vario <- variogram.lsm(z = z,d = d,a = a$anchorpoints,epsilon=0.1,n_angles=6,n_intervals=12,dim=1,kernel_id="gaussian")
solu <- findsolutions.lsm(vario ,lower.delta = 2, "exp", c(0.2,0.2,0.3,0.3), upper.bound = c(0.5,0.5,pi/2,10))
solu$solutions
solu$solutions
solu$solutions
mypoints<-plot.lsm(model = solu, a=a, n_points = 10, points_arrangement = "straight", kriging = FALSE,
ellipse_scale = 2.5 , arrow_scale = 1.5)
mypoints<-plot.lsm(model = solu, a=a, n_points = 10, points_arrangement = "straight", kriging = FALSE,
ellipse_scale = 2.5 , arrow_scale = 1.5)
library(LocallyStationaryModels)
vario <- variogram.lsm(z = z,d = d,a = a$anchorpoints,epsilon=0.1,n_angles=6,n_intervals=12,dim=1,kernel_id="gaussian")
solu <- findsolutions.lsm(vario ,lower.delta = 2, "ExponentialNugge", c(0.2,0.2,0.3,0.3), upper.bound = c(0.5,0.5,pi/2,10))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 2, "ExponentialNugget", c(0.2,0.2,0.3,0.3), upper.bound = c(0.5,0.5,pi/2,10))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 2, "ExponentialNugget", c(0.2,0.2,0.3,0.3,0.1), upper.bound = c(0.5,0.5,pi/2,10))
solu <- findsolutions.lsm(vario ,lower.delta = 2, "ExponentialNugget", c(0.2,0.2,0.3,0.3,0.1), upper.bound = c(0.5,0.5,pi/2,10,10))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 2, "ExponentialNugget", c(0.2,0.2,0.3,0.3,0.1), upper.bound = c(0.5,0.5,pi/2,10,10))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 2, "exponentialnugget", c(0.2,0.2,0.3,0.3,0.1), upper.bound = c(0.5,0.5,pi/2,10,10))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 2, "exponentialnugget", c(0.2,0.2,0.3,0.3,0.01), upper.bound = c(0.5,0.5,pi/2,10,10))
solu$solutions
exp(-8)
sqrt(exp(-8))
sqrt(exp(-6))
exp(log(0.3))
solu <- findsolutions.lsm(vario ,lower.delta = 2, "exponentialnugget", c(0.2,0.2,0.3,0.3,0.01), upper.bound = c(0.5,0.5,pi/2,10,10))
solu$solutions
a <- find_anchorpoints.lsm(d,n = 2)
z <- as.matrix(simulated_process[,3])
vario <- variogram.lsm(z = z,d = d,a = a$anchorpoints,epsilon=0.1,n_angles=6,n_intervals=12,dim=1,kernel_id="gaussian")
plotvario(vario,6)
solu <- findsolutions.lsm(vario ,lower.delta = 2, "exponentialnugget", c(0.2,0.2,0.3,0.3,0.01), upper.bound = c(0.5,0.5,pi/2,10,10))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 2, "exponentialnugget", c(0.02,0.02,0.3,0.3,0.01), upper.bound = c(0.5,0.5,pi/2,10,10))
solu$solutions
sqrt(exp(-6))
sqrt(exp(-8))
a <- find_anchorpoints.lsm(d,n = 1)
vario <- variogram.lsm(z = z,d = d,a = a$anchorpoints,epsilon=0.1,n_angles=6,n_intervals=12,dim=1,kernel_id="gaussian")
plotvario(vario,6)
solu <- findsolutions.lsm(vario ,lower.delta = 2, "exponentialnugget", c(0.02,0.02,0.3,0.3,0.01), upper.bound = c(0.5,0.5,pi/2,10,10))
solu <- findsolutions.lsm(vario ,lower.delta = 2, "exponentialnugget", c(0.02,0.02,0.3,0.3,0.01), upper.bound = c(0.5,0.5,pi/2,10,10))
solu$solutions
solu <- findsolutions.lsm(vario ,lower.delta = 2, "exponentialnugget", c(0.02,0.05,0.3,0.3,0.01), upper.bound = c(0.5,0.5,pi/2,10,10))
solu$solutions
library(LocallyStationaryModels)
library(LocallyStationaryModels)
