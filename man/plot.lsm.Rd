% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PlotFunctions.R
\name{plot.lsm}
\alias{plot.lsm}
\title{Plot LSM}
\usage{
\method{plot}{lsm}(
  model,
  a,
  z,
  d,
  n_points = 3,
  seed = 69,
  points_arrangement = "straight",
  n_threads = -1,
  kriging = FALSE,
  ellipse_scale = 1,
  arrow_scale = 1
)
}
\arguments{
\item{model}{an object returned by findsolutions.lsm}

\item{a}{the object returned by findanchorpoints.lsm used to generate the model}

\item{n_points}{a parameter proportional to the number of points generated to visualize the model}

\item{seed}{if points_arrangement is set to 'random', the seed used to generate the random points around each anchorpoints}

\item{points_arrangement}{arrangement of the points around each anchorpoints. "random" generates n_points random points in the 
neighbourhood of each anchor point; "straight" generates n_points*n_points equally spaced points in the neighbourhood of each anchor point}

\item{n_threads}{the number of threads for OpenMP, by default is equal to -1, which means that OpenMP will use all the available threads.}

\item{kriging}{if set to FALSE suppress the computation and the plot of the kriging; by default is FALSE}

\item{ellipse_scale}{how much the ellipses should be scaled in the plot compared to the default dimension}

\item{arrow_scale}{how much the arrows should be scaled in the plot compared to the default dimension}
}
\value{
a dataframe containing the coordinates, the values of the parameters and the kriging of all the points generated by the function
}
\description{
generate various plots in order to better visualize the model built
}
\details{
given the final solutions of the analysis, this function allows to visualize all the steps done by providing
a bubble plot of the initial data, a pair of plots with the anisotropy ellipses and directions, 
two plots with the values of the mean and punctual value of z predicted.
}
\examples{
data(meuse)
d <- cbind(meuse$x, meuse$y)
y <- meuse$elev
a <- find_anchorpoints.lsm(d,12,FALSE)
vario <- variogram.lsm(y,d,a$anchorpoints,370,8,8,"gaussian")
solu <- findsolutions.lsm(vario, "exponential", c(200,200,0.01,100))
mypoints<-plot.lsm(model = solu, a = a, z = y, d = d, n_points = 3, points_arrangement = "straight", kriging = TRUE, ellipse_scale = 2, arrow_scale = 1.5)
}
